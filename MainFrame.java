/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package astar;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.util.Observable;
import java.util.Observer;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;

/**
 *
 * @author Jarek
 */
public class MainFrame extends javax.swing.JFrame implements Observer
{

    public AStarThread aStarThread;
    public Thread thread;
    
    public MyLabel[][] labelArray;
    public int[][] gridArray;
    
    public Point start;
    public Point meta;
    
    public boolean isMappedGenerated = false;
    
    
    /**
     * Creates new form MainForm
     */
    public MainFrame()
    {
        try{
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        }
        catch(Exception e){}         
        initComponents();
        
        ButtonGroup myButtonGroup = new ButtonGroup();
        myButtonGroup.add(startRB);
        myButtonGroup.add(metaRB);
        myButtonGroup.add(obstacleRB);        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        generateButton = new javax.swing.JButton();
        startRB = new javax.swing.JRadioButton();
        metaRB = new javax.swing.JRadioButton();
        obstacleRB = new javax.swing.JRadioButton();
        startButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        delayTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        panelContainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("A Star - Jaros≈Çaw Szutkowski");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        generateButton.setText("Generate grid");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        startRB.setText("Start");

        metaRB.setText("Target");

        obstacleRB.setText("Obstacle");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        delayTextField.setText("0");

        jLabel1.setText("Delay[ms]");

        clearButton.setText("Clear");
        clearButton.setEnabled(false);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(startRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(metaRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(obstacleRB)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(clearButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pauseButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateButton)
                    .addComponent(startButton)
                    .addComponent(delayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startRB)
                            .addComponent(metaRB)
                            .addComponent(obstacleRB)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pauseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stopButton)
                            .addComponent(clearButton)))))
        );

        javax.swing.GroupLayout panelContainerLayout = new javax.swing.GroupLayout(panelContainer);
        panelContainer.setLayout(panelContainerLayout);
        panelContainerLayout.setHorizontalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        panelContainerLayout.setVerticalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_generateButtonActionPerformed
    {//GEN-HEADEREND:event_generateButtonActionPerformed
        try
        {
            String rowsTF = (String) JOptionPane.showInputDialog(
                            MainFrame.this,
                            "Enter grid size (5 - 30)",
                            "Generating grid",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            null,
                            "");
            int rows = Integer.parseInt(rowsTF);
            if(rows >= 5 && rows <= 30)
            {
                fillPanelContainer(rows);
            }
        }
        catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_generateButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startButtonActionPerformed
    {//GEN-HEADEREND:event_startButtonActionPerformed
        int delay = 0;
        try
        {
            delay = Integer.parseInt(delayTextField.getText().toString());
        }
        catch(Exception e)
        {
        }
        
        delayTextField.setText(String.valueOf(delay));
        
        if(start == null)
        {
            JOptionPane.showMessageDialog(this, "Start point has not been established", "", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(meta == null)
        {
            JOptionPane.showMessageDialog(this, "Target point has not been established", "", JOptionPane.ERROR_MESSAGE);
            //zaznacz metƒô
            return;
        }

        clear();
        
        startButton.setEnabled(false);
        pauseButton.setEnabled(true);
        stopButton.setEnabled(true);
        
        startRB.setEnabled(false);
        metaRB.setEnabled(false);
        obstacleRB.setEnabled(false);    
        clearButton.setEnabled(false);
        delayTextField.setEnabled(false);
        
        generateButton.setEnabled(false);

        aStarThread = new AStarThread(this, start, meta, labelArray, gridArray, delay);
        aStarThread.addObserver(this);
        thread = new Thread(aStarThread);
        thread.start();
    }//GEN-LAST:event_startButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pauseButtonActionPerformed
    {//GEN-HEADEREND:event_pauseButtonActionPerformed
        String text = pauseButton.getText().toString();
        
        if(text.equals("Pause"))
        {
            aStarThread.isPaused = true;
            pauseButton.setText("Resume");
        }
        else
        {
            aStarThread.isPaused = false;
            pauseButton.setText("Pause");
            
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_stopButtonActionPerformed
    {//GEN-HEADEREND:event_stopButtonActionPerformed
        aStarThread.isStopped = true;
    }//GEN-LAST:event_stopButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
    {//GEN-HEADEREND:event_clearButtonActionPerformed
        clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MainFrame().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField delayTextField;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton metaRB;
    private javax.swing.JRadioButton obstacleRB;
    private javax.swing.JPanel panelContainer;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton startButton;
    private javax.swing.JRadioButton startRB;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Generowanie tablicy
     */
    private void fillPanelContainer(int x)
    {
        panelContainer.removeAll();
        panelContainer.revalidate();
        panelContainer.repaint();
        
        panelContainer.getWidth();
        panelContainer.getHeight();
        
        start = null;
        meta = null;
        
        int squareSize = panelContainer.getWidth() / x;

        panelContainer.setLayout(new GridLayout(x,x));
        
        labelArray = new MyLabel[x][x];
        gridArray = new int[x][x];
        
        for(int i = 0; i < x; i++)
        {
            for(int j = 0; j < x; j++)
            {
                MyLabel label = new MyLabel(i, j);
                label.setBorder(BorderFactory.createLineBorder(Color.black, 1)); 
                
                int withoutBorder = squareSize;
                
                label.setMaximumSize(new Dimension(withoutBorder, withoutBorder));
                label.setMaximumSize(new Dimension(withoutBorder, withoutBorder));
                label.setPreferredSize(new Dimension(withoutBorder, withoutBorder));
                label.setOpaque(true);
                label.setBackground(Color.white);
                label.setHorizontalAlignment(SwingConstants.CENTER);
                label.setVerticalAlignment(SwingConstants.CENTER);
                
                labelArray[i][j] = label;
                
                label.addMouseListener(new PMouseClickListener());
                panelContainer.add (label);
            }
        }
        
        isMappedGenerated = true;
    }
    
    class PMouseClickListener extends PanelMouseClickListener
    {
        @Override
        public void mousePressed(MouseEvent e)
        {
            if(startRB.isEnabled() == false)
            {
                return;
            }
            
            MyLabel label = (MyLabel)e.getComponent();
            
            Point position = new Point(label.getPX(), label.getPY());

            if(startRB.isSelected())
            {
                if(gridArray[position.x][position.y] != 5) // czy punkt nie jest przeszkodƒÖ
                {
                    //czy punkt nie jest metƒÖ
                    if((meta != null && (meta.x != position.x || meta.y != position.y)) || meta == null)
                    {
                        //je≈õli start jest juz w tym punkcie
                        if(start != null && start.x == position.x && start.y == position.y)
                        {
                            label.setBackground(Color.white);
                            start = null;
                        }
                        else
                        {
                            if(start != null)
                            {
                                labelArray[start.x][start.y].setBackground(Color.white);
                            }
                            start = position;
                            labelArray[start.x][start.y].setBackground(Color.ORANGE);
                            
                        }
                    }
                }
            }
            else if(metaRB.isSelected())
            {
                if(gridArray[position.x][position.y] != 5) // czy punkt nie jest przeszkodƒÖ
                {
                    //czy punkt nie jest metƒÖ
                    
                    if((start != null && (start.x != position.x || start.y != position.y)) || start == null)
                    {
                        //je≈õli start jest juz w tym punkcie
                        if(meta != null && meta.x == position.x && meta.y == position.y)
                        {
                            label.setBackground(Color.white);
                            meta = null;
                        }
                        else
                        {
                            if(meta != null)
                            {
                                labelArray[meta.x][meta.y].setBackground(Color.white);
                            }
                            meta = position;
                            labelArray[meta.x][meta.y].setBackground(new Color(0,0,128));
                            
                        }
                    }
                }                

            }
            else if(obstacleRB.isSelected())
            {
                if(((start != null && (start.x != position.x || start.y != position.y)) || start == null) &&
                     (meta != null && (meta.x != position.x || meta.y != position.y)) || meta == null   
                        )
                {
                    if(gridArray[position.x][position.y] != 5)
                    {
                        label.setBackground(Color.red);
                        gridArray[position.x][position.y] = 5;
                    }
                    else
                    {
                        label.setBackground(Color.white);
                        gridArray[position.x][position.y] = 0;
                    }
                }
            }
        }        
    }
    
    @Override
    public void update(Observable o, Object arg)
    {
        pauseButton.setText("Pause");
        
        delayTextField.setEnabled(true);
        startButton.setEnabled(true);
        pauseButton.setEnabled(false);
        stopButton.setEnabled(false);
        
        startRB.setEnabled(true);
        metaRB.setEnabled(true);
        obstacleRB.setEnabled(true);  
        clearButton.setEnabled(true);
        
        generateButton.setEnabled(true);
    }    
    
    private void clear()
    {
        for(int i = 0; i < labelArray.length; i++)
        {
            for(int j = 0; j < labelArray.length; j++)
            {
                if((start.x != i || start.y != j) && (meta.x != i || meta.y != j) && gridArray[i][j] != 5)
                {
                    labelArray[i][j].setBackground(Color.WHITE);
                }
                labelArray[i][j].setText("");
            }
        }
    }
}